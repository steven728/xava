/**
 * The MIT License
 * 
 * Copyright (c) 2016-2018 Shell Technologies PTY LTD
 *
 * You may obtain a copy of the License at
 * 
 *       http://mit-license.org/
 *       
 */
package io.roxa.xava.vertx.rx;

import java.util.List;
import java.util.function.Function;

import io.reactivex.Single;
import io.vertx.core.Future;
import io.vertx.core.json.JsonArray;
import io.vertx.ext.sql.ResultSet;
import io.vertx.ext.sql.SQLOptions;
import io.vertx.ext.sql.UpdateResult;
import io.vertx.reactivex.SingleHelper;
import io.vertx.reactivex.ext.jdbc.JDBCClient;
import io.vertx.reactivex.ext.sql.SQLConnection;

/**
 * @author Steven Chen
 *
 */
public class JdbcExecutorRxified {

	private JDBCClient jdbcClient;

	public <T> Future<T> execTx(Function<SQLConnection, Single<T>> execHandler) {
		Future<T> future = Future.future();
		jdbcClient.rxGetConnection().flatMap(conn -> {
			return conn.rxSetAutoCommit(false).andThen(execHandler.apply(conn))
					.flatMap(rows -> conn.rxCommit().andThen(Single.just(rows))).onErrorResumeNext(t -> {
						return conn.rxRollback().onErrorComplete().andThen(conn.rxSetAutoCommit(true).onErrorComplete())
								.andThen(Single.error(t));
					}).flatMap(rows -> conn.rxSetAutoCommit(true).andThen(Single.just(rows))).doFinally(conn::close);

		}).subscribe(SingleHelper.toObserver(future.completer()));
		return future;
	}

	public <T> Future<T> exec(Function<SQLConnection, Single<T>> execHandler) {
		Future<T> future = Future.future();
		jdbcClient.rxGetConnection().flatMap(conn -> {
			return execHandler.apply(conn).onErrorResumeNext(t -> Single.error(t)).doFinally(conn::close);
		}).subscribe(SingleHelper.toObserver(future.completer()));
		return future;
	}

	public Future<List<JsonArray>> query(String sql) {
		Future<List<JsonArray>> future = Future.future();
		jdbcClient.rxQuery(sql).map(ResultSet::getResults).subscribe(SingleHelper.toObserver(future.completer()));
		return future;
	}

	public Future<List<JsonArray>> query(String sql, JsonArray params) {
		Future<List<JsonArray>> future = Future.future();
		jdbcClient.rxQueryWithParams(sql, params).map(ResultSet::getResults)
				.subscribe(SingleHelper.toObserver(future.completer()));
		return future;
	}

	public Future<JsonArray> querySingle(String sql) {
		Future<JsonArray> future = Future.future();
		jdbcClient.rxQuerySingle(sql).subscribe(SingleHelper.toObserver(future.completer()));
		return future;
	}

	public Future<JsonArray> querySingle(String sql, JsonArray params) {
		Future<JsonArray> future = Future.future();
		jdbcClient.rxQuerySingleWithParams(sql, params).subscribe(SingleHelper.toObserver(future.completer()));
		return future;
	}

	public Single<List<JsonArray>> query(SQLConnection conn, String sql) {
		return conn.rxQuery(sql).map(ResultSet::getResults);
	}

	public Single<List<JsonArray>> query(SQLConnection conn, String sql, JsonArray params) {
		return conn.rxQueryWithParams(sql, params).map(ResultSet::getResults);
	}

	public Single<JsonArray> querySingle(SQLConnection conn, String sql) {
		return conn.rxQuerySingle(sql);
	}

	public Single<JsonArray> querySingle(SQLConnection conn, String sql, JsonArray params) {
		return conn.rxQuerySingleWithParams(sql, params);
	}

	public Future<UpdateResult> update(String sql) {
		Future<UpdateResult> future = Future.future();
		jdbcClient.rxUpdate(sql).subscribe(SingleHelper.toObserver(future.completer()));
		return future;
	}

	public Future<UpdateResult> update(String sql, String autoKeyName) {
		return exec(conn -> {
			return conn.setOptions(new SQLOptions().setAutoGeneratedKeys(true)
					.setAutoGeneratedKeysIndexes(new JsonArray().add(autoKeyName))).rxUpdate(sql);
		});
	}

	public Future<UpdateResult> update(String sql, JsonArray params, String autoKeyName) {
		return exec(conn -> {
			return conn
					.setOptions(new SQLOptions().setAutoGeneratedKeys(true)
							.setAutoGeneratedKeysIndexes(new JsonArray().add(autoKeyName)))
					.rxUpdateWithParams(sql, params);
		});
	}

	public Single<UpdateResult> update(SQLConnection conn, String sql) {
		return conn.rxUpdate(sql);
	}

	public Future<UpdateResult> update(SQLConnection conn, String sql, String autoKeyName) {
		Future<UpdateResult> future = Future.future();
		conn.setOptions(new SQLOptions().setAutoGeneratedKeys(true)
				.setAutoGeneratedKeysIndexes(new JsonArray().add(autoKeyName))).rxUpdate(sql)
				.subscribe(SingleHelper.toObserver(future.completer()));
		return future;
	}

	public Future<UpdateResult> update(SQLConnection conn, String sql, JsonArray params, String autoKeyName) {
		Future<UpdateResult> future = Future.future();
		conn.setOptions(new SQLOptions().setAutoGeneratedKeys(true)
				.setAutoGeneratedKeysIndexes(new JsonArray().add(autoKeyName))).rxUpdateWithParams(sql, params)
				.subscribe(SingleHelper.toObserver(future.completer()));
		return future;
	}

	public Future<UpdateResult> update(String sql, JsonArray params) {
		Future<UpdateResult> future = Future.future();
		jdbcClient.rxUpdateWithParams(sql, params).subscribe(SingleHelper.toObserver(future.completer()));
		return future;
	}

	public Single<UpdateResult> update(SQLConnection conn, String sql, JsonArray params) {
		return conn.rxUpdateWithParams(sql, params);
	}
}
